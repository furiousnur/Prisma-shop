// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  id        BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  parentId  BigInt?     @db.UnsignedBigInt
  title     String      @db.VarChar(75)
  metaTitle String      @db.VarChar(100) 
  slug      String      @db.VarChar(100)  
  content   String      @db.Text
  parent    Categories? @relation("ParentToChild", fields: [parentId], references: [id])
  children  Categories[] @relation("ParentToChild")
  Post_Category   Post_Category[] 
}

model User {
  id                BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  firstName         String      @db.VarChar(50)
  middleName        String      @db.VarChar(50)
  lastName          String      @db.VarChar(50)
  mobile            String      @db.VarChar(15) 
  email             String      @db.VarChar(50) @unique
  passwordHash      String      @db.VarChar(32)   
  registeredAt      DateTime    @default(now()) @db.DateTime(6) 
  lastLoginAt       DateTime?   @db.DateTime
  intro             String      @db.TinyText
  profile           String      @db.Text
  Posts             Post[]
}

model Post {
    id              BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
    authorId        BigInt      @db.UnsignedBigInt
    parentId        BigInt?     @db.UnsignedBigInt
    title           String      @db.VarChar(75)
    metaTitle       String      @db.VarChar(100) 
    slug            String      @db.VarChar(100)  
    summary         String      @db.TinyText
    published       Int         @db.TinyInt @default(0)
    content         String      @db.Text
    createdAt       DateTime    @default(now()) @db.DateTime(6)
    updatedAt       DateTime    @updatedAt @db.DateTime(6)
    publishedAt     DateTime?   @db.DateTime(6)
    author          User        @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    parent          Post?       @relation("ParentToChild", fields: [parentId], references: [id])
    children        Post[]      @relation("ParentToChild")
    Post_Category   Post_Category[]
    Post_Meta       Post_Meta[]
    Post_Tag        Post_Tag[]
    Post_Comment    Post_Comment[]
}

model Post_Meta {
    id              BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
    postId          BigInt      @db.UnsignedBigInt
    Key             String      @db.VarChar(50)
    content         String      @db.Text
    post            Post        @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model Post_Category {
    postId          BigInt      @db.UnsignedBigInt
    categoryId      BigInt      @db.UnsignedBigInt
    post            Post        @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    category        Categories  @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    @@id([postId, categoryId])
}

model Tag {
    id              BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
    title           String      @db.VarChar(75)
    metaTitle       String      @db.VarChar(100) 
    slug            String      @db.VarChar(100)  
    content         String      @db.Text
    Post_Tag        Post_Tag[]
}

model Post_Tag {
    postId          BigInt      @db.UnsignedBigInt
    tagId           BigInt      @db.UnsignedBigInt
    post            Post        @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    tag             Tag         @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    @@id([postId, tagId])
}

model Post_Comment {
    id              BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
    postId          BigInt              @db.UnsignedBigInt 
    parentId        BigInt?             @db.UnsignedBigInt
    title           String              @db.VarChar(100)
    published       Int                 @db.TinyInt @default(0)
    content         String              @db.Text
    createdAt       DateTime            @default(now()) @db.DateTime(6)
    updatedAt       DateTime            @updatedAt @db.DateTime(6)
    publishedAt     DateTime?           @db.DateTime(6)
    post            Post                @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    parent          Post_Comment?       @relation("ParentToChild", fields: [parentId], references: [id])
    children        Post_Comment[]      @relation("ParentToChild")
}